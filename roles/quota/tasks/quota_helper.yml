---
- name: Quota Helper
# check the clients to add also process default settings here
  vars:
    clients_desired: "{{ quota_desired.clients if quota_desired.clients is defined and entity=='users' else [] }}"
    clients_state: "{{ quota_state.clients if quota_state.clients is defined and entity=='users' else [] }}"
    quota_desired_entity: "{{ quota_desired[entity] if quota_desired != {} else {}}}"
    quota_state_entity: "{{ quota_state[entity] if quota_state != {} else {} }}"
  block:
    - name: Print out
      debug:
        msg:
          - "{{entity}}"
          - "quota desired>{{quota_desired}}"
          - "quota state  >{{quota_state}}"
          - "Clients desired>{{clients_desired}}"
          - "Clients state  >{{clients_state}}"
          - "Add list     >{{to_add_list}}"
          - "Delete list  >{{to_delete_list}}"
        verbosity: 2

    - name: To Add Clients/Users
      # if any condition is met just add everything for the specific user
      set_fact:
        quotas_to_add_entity: "{{quotas_to_add_entity + [{entity: quota_desired_entity}|combine(dict(_skeys|zip(_svals)))]}}"
      vars:
        _skeys: "{{ quota_desired.keys()|d([])|list|difference(['clients'])}}"
        _temp: "{{ quota_state | d({})}}"
        _tkeys: "{{ _temp.keys()| d([])|list|difference(['clients'])}}"
        _diff_keys: "{{ _skeys|difference(_tkeys) }}"
        _svals: "{{ _skeys|map('extract',quota_desired)|d([])|list }}"
        _tvals: "{{ _tkeys|map('extract', quota_state)| d([])|list }}"
        _diff_vals: "{{ _svals|difference(_tvals) }}"
      # if state if empty for the main item or
      when: (quota_state|length == 0  or _diff_keys|length != 0 or _diff_vals|length !=0) and quota_desired_entity not in to_delete_list

    - name: To Add Users/Clients Quotas
      set_fact:
        quotas_to_add_entity: "{{quotas_to_add_entity + [{entity: quota_state_entity, 'clients': [dict(_skeys|zip(_svals))]}]}}"
      # if state if empty for the main item or
      loop: "{{(clients_desired+clients_state)|groupby('clients')}}"
      when: clients_desired|length>0 and (_diff_keys|length>0 or _diff_vals|length>0)
      vars:
        _source: "{{item.1|first if item.1|first in clients_desired else {} }}"
        _target: "{{item.1|last if item.1|last in clients_state else {} }}"
        _skeys: "{{ _source.keys()|d([])}}"
        _tkeys: "{{ _target.keys()| d([]) }}"
        _diff_keys: "{{ _skeys|difference(_tkeys) }}"
        _svals: "{{ _skeys|map('extract',item.1.0)|d([])|list }}"
        _tvals: "{{ _tkeys|map('extract', item.1.1)| d([])|list }}"
        _diff_vals: "{{ _svals|difference(_tvals) }}"

    - name: To Delete Clients/Users
      # full user to be deleted
      set_fact:
        quotas_to_delete_entity: "{{ quotas_to_delete_entity+[{entity: quota_state_entity, 'delete': _diff_keys|difference([entity])}]}}"
      when: quota_state_entity in to_delete_list or _diff_keys|length != 0
      vars:
        _skeys: "{{ quota_desired.keys()|d([])|list|difference(['clients']) }}"
        _temp: "{{ quota_state | d({})}}"
        _tkeys: "{{ _temp.keys()| d([])|list|difference(['clients']) }}"
        _diff_keys: "{{ _tkeys|difference(_skeys) }}"

    - name: To Delete Users/Client quotas
        # check the quotas for attribure removals
      set_fact:
        quotas_to_delete_entity: "{{ quotas_to_delete_entity|d([])+[{'clients': item.0, entity: quota_state.users,
                                 'delete': _diff_keys|list|difference(['clients'])}]}}"
      loop: "{{ (clients_state + clients_desired) | groupby('clients') }}"
      vars:
        _source: "{{item.1|first if item.1|first in clients_state else {} }}"
        _target: "{{item.1|last if item.1|last in clients_desired else {} }}"
        _skeys: "{{ _source.keys()|d([]) }}"
        _tkeys: "{{ _target.keys()| d([]) }}"
        _diff_keys: "{{ _skeys|difference(_tkeys) }}"
      when: _diff_keys|length != 0

    - debug:
        msg:
          - "To add client list   >>>{{quotas_to_add_entity}}"
          - "To delete entity     >>>{{quotas_to_delete_entity}}"
