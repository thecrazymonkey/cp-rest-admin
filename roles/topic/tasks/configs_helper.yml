- name: Set delete
# check the configs to delete
  vars:
    configs_in: "{{ topic_in.configs|items2dict(key_name='name') }}"
    configs_dump: "{{ topic_state.configs|items2dict(key_name='name') }}"
  block:
    - ansible.builtin.set_fact:
        configs_to_reconfigure: []
        configs_to_delete: []

    - ansible.builtin.debug:
        msg: "configs in>{{ configs_in }}"
    - ansible.builtin.debug:
        msg: "configs _dump>{{ configs_dump }}"
    - ansible.builtin.debug:
        msg: "configs configs_to_reconfigure>{{ configs_to_reconfigure }}"
    # handle deletes first
    - ansible.builtin.set_fact:
        configs_to_delete: "{{ configs_to_delete + [{'name': item.0, 'operation': 'DELETE'}] }}"
      loop: "{{ configs_dump|dictsort }}"
      when: configs_in[item.0] is not defined
    # now config change and addition
    - ansible.builtin.set_fact:
        configs_to_reconfigure: "{{ configs_to_reconfigure + [{'name': item.0, 'value': configs_in[item.0] }] }}"
      loop: "{{ configs_in|dictsort }}"
      when: configs_dump[item.0] is not defined or (configs_in[item.0] != configs_dump[item.0])

    - ansible.builtin.debug:
        msg: "Config delete>{{ configs_to_delete }}"
        verbosity: 2
    - ansible.builtin.debug:
        msg: "Config to reconfigure>{{ configs_to_reconfigure }}"
        verbosity: 2
    - ansible.builtin.set_fact:
        topics_to_reconfigure_configs: "{{topics_to_reconfigure_configs + [topic_in | combine({ 'configs' : (configs_to_delete + configs_to_reconfigure)} )]}}"
      when: configs_to_delete|length >0 or configs_to_reconfigure|length>0
    - ansible.builtin.debug:
        msg: "Config merged>{{ topics_to_reconfigure_configs }}"
