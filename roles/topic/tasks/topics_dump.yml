---
# build a configuration structure from current state of topics/configs in the cluster
- name: Get Topics List
  uri:
    url: "{{rest_server_url}}/kafka/v3/clusters/{{cluster_id}}/topics"
    method: GET
    validate_certs: true
    client_cert: "{{ none if client_tls_cert is not defined else client_tls_cert }}"
    client_key: "{{ none if client_tls_key is not defined else client_tls_key }}"
    ca_path: "{{ none if ca_tls_path is not defined else ca_tls_path }}"
    force_basic_auth: true
    headers:
      Authorization: "{{ authorization_header }}"
    body_format: json
  register: topics_list_temp
  check_mode: false

- name: Set Only Essential Fields and Non-protected Topics
# cater for 6.2 -> 7.0 API change
  set_fact:
    topics_list: '{{ topics_list | default([]) +
      [{ "topic_name": item.topic_name, "replication_factor" : item.replication_factor, "partitions_count" : item.partitions_count }] }}'
    partitions_defined: true
  loop: "{{ topics_list_temp.json.data | d([]) }}"
  when: (test_whitelist|length > 0 and test_protected|length == 0) and item.partitions_count is defined
  vars:
    test_whitelist: "{{ item.topic_name|regex_search(topic_whitelist) }}"
    test_protected: "{{ item.topic_name|regex_search(topic_protected) }}"


- name: Set Only Essential Fields and Non-protected Topics
# cater for 6.2 -> 7.0 API change
  set_fact:
    topics_list: '{{ topics_list | default([]) +
       [{ "topic_name": item.topic_name, "replication_factor" : item.replication_factor }] }}'
    partitions_defined: false
  loop: "{{ topics_list_temp.json.data | d([]) }}"
  when: (test_whitelist|length > 0 and test_protected|length == 0) and item.partitions_count is not defined
  vars:
    test_whitelist: "{{ item.topic_name| regex_search(topic_whitelist) }}"
    test_protected: "{{ item.topic_name| regex_search(topic_protected) }}"

- name: Process List Of Topics
  include_tasks: tasks/topics_dump_tasks.yml
  loop: "{{ topics_list }}"
  when: topics_list | d([]) | length > 0
  loop_control:
    loop_var: topic_item
