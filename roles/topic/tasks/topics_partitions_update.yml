---
# Low level topic operations - using Confluent Server v3 API - once it gets merged
- name: Add partitions
  uri:
    url: "{{rest_server_url}}{{url_cluster_prefix}}/v3/clusters/{{cluster_id}}/topics/{{item.topic_name}}"
    method: PATCH
    validate_certs: true
    client_cert: "{{ none if client_tls_cert is not defined else client_tls_cert }}"
    client_key: "{{ none if client_tls_key is not defined else client_tls_key }}"
    ca_path: "{{ none if ca_tls_path is not defined else ca_tls_path }}"
    force_basic_auth: true
    headers:
      Authorization: "{{ authorization_header }}"
    body_format: json
    body: "{ \"partitions_count\": {{item.partitions_count}} }"
    status_code: [200, 405]
  register: _result
  changed_when: _result.status == 200
  loop: "{{ topics_in }}"

- debug:
    var: _result
    verbosity: 2
# pass 405 into the cli processing

- name: Add partitions CLI
# not supported via REST API yet - needs direct call to Kafka Admin API
  shell: |
    {{ binary_base_path }}/bin/kafka-topics --bootstrap-server {{kafka_broker_hostname}}:{{kafka_broker_port}} \
      --alter --topic {{ item.topic_name }} --partitions {{ item.partitions_count }} --command-config {{kafka_broker_client_config_file}}
  environment:
    CONFLUENT_SECURITY_MASTER_KEY: "{{ secrets_protection_masterkey }}"
  register: topics_result
  # stdout_lines will have topics with URPs and stderr has WARN and ERROR level logs
  until: topics_result.rc == 0 and 'ERROR' not in topics_result.stderr
  changed_when: "topics_result.rc == 0"
  loop: "{{topics_in}}"
  when: _result.results[0].status == 405
